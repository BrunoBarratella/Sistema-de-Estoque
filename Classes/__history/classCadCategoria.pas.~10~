unit classCadCategoria;

interface

uses  System.Classes,
      System.SysUtils,
      Vcl.Controls,
      Vcl.ExtCtrls,
      Vcl.Dialogs,
      ZAbstractConnection,
      ZConnection,
      ZAbstractRODataset,
      ZAbstractDataset,
      ZDataset;

type
  TClassCadCategoria = class
  private
    ConexaoDB: TZConnection;
    fieldCategoriaID: Integer;
    fieldDescricao: String;
    function getCodigo: Integer;
    function getDescricao: String;
    procedure setCodigo(const Value: Integer);
    procedure setDescricao(const Value: String);

  public
    constructor Create(aConexao: TZConnection);
    destructor Destroy; override;
    function Gravar: Boolean;
    function Alterar: Boolean;
    function Apagar: Boolean;
    function Selecionar(Id:integer):Boolean;

  published
     property codigo:Integer read getCodigo write setCodigo;
     property descricao:String read getDescricao write setDescricao;
  end;


implementation


{ TClassCadCategoria }

{$region 'Constructor e Destructor'}
constructor TClassCadCategoria.Create(aConexao: TZConnection);
begin
  ConexaoDB := aConexao;
end;

destructor TClassCadCategoria.Destroy;
begin
  //ShowMessage('Fui Destruído!');
  inherited;
end;
{$endregion}

{$region 'CRUD'}
function TClassCadCategoria.Gravar: Boolean;
var qryInserir: TZQuery;
begin
  try
    qryInserir := TZQuery.Create(nil);
    qryInserir.Connection := ConexaoDB;
    qryInserir.SQL.Clear;
    qryInserir.SQL.Add('INSERT INTO TBL_CATEGORIA (DESCRICAO) VALUES (:FDescricao)');
    qryInserir.ParamByName('FDescricao').Value := Self.fieldDescricao;

    try
      qryInserir.ExecSQL;
    Except
      Result := False;
    end;

  finally
    if Assigned(qryInserir) then
      FreeAndNil(qryInserir);

  end;
end;

function TClassCadCategoria.Alterar: Boolean;
begin
  ShowMessage('Atualizado');
  Result := True;
end;

function TClassCadCategoria.Apagar: Boolean;
begin
  ShowMessage('Apagado');
  Result := True;
end;

function TClassCadCategoria.Selecionar(Id: integer): Boolean;
begin
  Result := True;
end;
{$endregion}

{$region 'Getters'}
function TClassCadCategoria.getCodigo: Integer;
begin
  Result :=  Self.fieldCategoriaID;
end;

function TClassCadCategoria.getDescricao: String;
begin
  Result := Self.fieldDescricao;
end;
{$endregion}

{$region 'Setters'}
procedure TClassCadCategoria.setCodigo(const Value: Integer);
begin
  Self.fieldCategoriaID := Value;
end;

procedure TClassCadCategoria.setDescricao(const Value: String);
begin
  Self.fieldDescricao := Value;
end;
{$endregion}
end.
